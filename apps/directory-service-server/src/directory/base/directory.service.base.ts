/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Directory as PrismaDirectory,
  Listing as PrismaListing,
} from "@prisma/client";

export class DirectoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DirectoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.directory.count(args);
  }

  async directories(
    args: Prisma.DirectoryFindManyArgs
  ): Promise<PrismaDirectory[]> {
    return this.prisma.directory.findMany(args);
  }
  async directory(
    args: Prisma.DirectoryFindUniqueArgs
  ): Promise<PrismaDirectory | null> {
    return this.prisma.directory.findUnique(args);
  }
  async createDirectory(
    args: Prisma.DirectoryCreateArgs
  ): Promise<PrismaDirectory> {
    return this.prisma.directory.create(args);
  }
  async updateDirectory(
    args: Prisma.DirectoryUpdateArgs
  ): Promise<PrismaDirectory> {
    return this.prisma.directory.update(args);
  }
  async deleteDirectory(
    args: Prisma.DirectoryDeleteArgs
  ): Promise<PrismaDirectory> {
    return this.prisma.directory.delete(args);
  }

  async findListings(
    parentId: string,
    args: Prisma.ListingFindManyArgs
  ): Promise<PrismaListing[]> {
    return this.prisma.directory
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .listings(args);
  }
}
