/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Directory } from "./Directory";
import { DirectoryCountArgs } from "./DirectoryCountArgs";
import { DirectoryFindManyArgs } from "./DirectoryFindManyArgs";
import { DirectoryFindUniqueArgs } from "./DirectoryFindUniqueArgs";
import { CreateDirectoryArgs } from "./CreateDirectoryArgs";
import { UpdateDirectoryArgs } from "./UpdateDirectoryArgs";
import { DeleteDirectoryArgs } from "./DeleteDirectoryArgs";
import { ListingFindManyArgs } from "../../listing/base/ListingFindManyArgs";
import { Listing } from "../../listing/base/Listing";
import { DirectoryService } from "../directory.service";
@graphql.Resolver(() => Directory)
export class DirectoryResolverBase {
  constructor(protected readonly service: DirectoryService) {}

  async _directoriesMeta(
    @graphql.Args() args: DirectoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Directory])
  async directories(
    @graphql.Args() args: DirectoryFindManyArgs
  ): Promise<Directory[]> {
    return this.service.directories(args);
  }

  @graphql.Query(() => Directory, { nullable: true })
  async directory(
    @graphql.Args() args: DirectoryFindUniqueArgs
  ): Promise<Directory | null> {
    const result = await this.service.directory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Directory)
  async createDirectory(
    @graphql.Args() args: CreateDirectoryArgs
  ): Promise<Directory> {
    return await this.service.createDirectory({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Directory)
  async updateDirectory(
    @graphql.Args() args: UpdateDirectoryArgs
  ): Promise<Directory | null> {
    try {
      return await this.service.updateDirectory({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Directory)
  async deleteDirectory(
    @graphql.Args() args: DeleteDirectoryArgs
  ): Promise<Directory | null> {
    try {
      return await this.service.deleteDirectory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Listing], { name: "listings" })
  async findListings(
    @graphql.Parent() parent: Directory,
    @graphql.Args() args: ListingFindManyArgs
  ): Promise<Listing[]> {
    const results = await this.service.findListings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
